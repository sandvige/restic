/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/restic/restic/pkg/cresticlib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "cbridge.go"

#include <stdlib.h>
#include <string.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// restic_init initializes a new repository  
extern int restic_init(char* repo_url, char* backend, char* password, char* access_key, char* secret_key, int parallelism);

// restic_open opens an existing repository
extern int restic_open(char* repo_url, char* backend, char* password, char* access_key, char* secret_key, int parallelism);

// restic_backup creates a backup and returns snapshot ID as string
extern int restic_backup(int repo_id, char** paths, int paths_count, char** tags, int tags_count, char** snapshot_id_out);

// restic_restore restores a snapshot to target directory
extern int restic_restore(int repo_id, char* snapshot_id, char* target_dir);

// restic_list_snapshots lists all snapshots in the repository  
extern int restic_list_snapshots(int repo_id, char*** ids_out, char*** times_out, char*** hostnames_out, int* count_out);

// restic_check performs repository integrity check
extern int restic_check(int repo_id, int* errors_out);

// restic_close closes a repository and frees resources
extern int restic_close(int repo_id);

// restic_free_string frees a string returned by the library
extern void restic_free_string(char* str);

// restic_free_snapshot_arrays frees arrays returned by restic_list_snapshots
extern void restic_free_snapshot_arrays(char** ids, char** times, char** hostnames, int count);

// restic_get_version returns the library version
extern char* restic_get_version();

// restic_get_error_message returns a human-readable error message for an error code
extern char* restic_get_error_message(int error_code);

#ifdef __cplusplus
}
#endif
